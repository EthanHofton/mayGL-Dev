#version 400

uniform vec3 u_CamPos;
uniform float u_Time;
uniform sampler2D u_Textures[16];

out vec4 o_FragColor;

in vec2 o_texCoords;
in vec3 o_normal;
in vec3 o_fragPos;

in MATOUT 
{
    vec3 Ka;
    vec3 Kd;
    vec3 Ks;
    float Ns;
    float mapKd;
    float mapKs;
} m1;

void main()
{
    // should be passed in as uniforms
    //vec3 lightColor = vec3(sin(u_Time), cos(u_Time), sin(u_Time + 1.570));
	vec3 lightColor = vec3(1,1,1);
    vec3 lightPos = vec3(0, 5, 0);
    // should be passed in as uniforms
    
    // normals and light dir
    vec3 norm = normalize(o_normal);
    vec3 lightDir = normalize(lightPos - o_fragPos);
    // normals and light dir
    
    // ambient
    vec3 a = vec3(texture(u_Textures[int(m1.mapKd)], o_texCoords));
    vec3 ambient = lightColor * m1.Ka;
    // ambient
    
    // deffuse
    vec3 d = vec3(texture(u_Textures[int(m1.mapKd)], o_texCoords));
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightColor * (diff * m1.Kd);
    // deffuse
    
    // specular  
    vec3 s = vec3(texture(u_Textures[int(m1.mapKs)], o_texCoords));  
    vec3 viewDir = normalize(u_CamPos - o_fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), m1.Ns);
    vec3 specular = lightColor * (spec * m1.Ks);
    // specular
    

    vec3 result = (ambient + diffuse + specular);

    o_FragColor = vec4(result, 1.0);
}









